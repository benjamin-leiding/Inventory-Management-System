pipeline {
  environment {
    dockerregistry = "https://registry.etce.isse.tu-clausthal.de"
    dockerregistrycredential = "docker-registry-private"
    serverdockerimagename = "registry.etce.isse.tu-clausthal.de/etce-lab/inventory-management-server:latest"
    serverDockerImage = ""
    TOKEN = credentials('jenkins-deployer-sa-token')
    KUBERNETES_SERVER = credentials('kubernetes-server-api-url')
  }
  agent any
  stages {
    stage('Checkout Source') {
      steps {
        git url: 'https://github.com/ETCE-LAB/Inventory-Management-System.git',
            branch: 'CI-CD'
      }
    }
    stage('Build client react APP') {
      steps{
        sh '''
          mkdir -p app
          cp -R client/* app/
          cd app
          npm install
          npm run build
          ls -l build/
        '''
      }
    }
    stage('Deploy Static Files'){
        steps{
          sh '''
            cp -R app/build/* /mnt/nginx-reverse-proxy-static-files/inventory-management/
          '''
        }
    }
    stage('Build Server image') {
      steps{
        script{
          dir("server"){
            serverDockerImage = docker.build(serverdockerimagename)
          }
        }
      }
    }
    stage('Deploy Server Image'){
      steps{
        script{
          docker.withRegistry(dockerregistry, dockerregistrycredential){
          serverDockerImage.push("latest")
          }
        }
      }
    }
    stage('Remove Unused docker image'){
      steps{
        sh 'docker rmi $serverdockerimagename'
        sh 'docker rmi $clientdockerimagename'
      }
    }
    stage('Re-deploy Kubernetes Pod'){
          steps{
                sh '''
                 kubectl --token=${TOKEN} --server="${KUBERNETES_SERVER}" --insecure-skip-tls-verify -n inventory-management get pods
                 kubectl --token=${TOKEN} --server="${KUBERNETES_SERVER}" --insecure-skip-tls-verify -n inventory-management delete pods -l=app=etce-ims-server
                 kubectl --token=${TOKEN} --server="${KUBERNETES_SERVER}" --insecure-skip-tls-verify -n inventory-management apply -f etce-ims-server-deployment.yaml
                 kubectl --token=${TOKEN} --server="${KUBERNETES_SERVER}" --insecure-skip-tls-verify -n inventory-management apply -f etce-ims-server-service.yaml
                '''
       }
}
    }
  }
